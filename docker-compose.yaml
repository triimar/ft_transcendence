networks:
  transcendence:
    name: transcendence
    driver: bridge

volumes:
  db_sql:
    name: db_sql
    driver: local
    driver_opts:
      o: "bind"
      type: none
      device: ./db_sql

services:
  db_redis:
    container_name: db_redis
    image: redis/redis-stack:7.4.0-v1
    networks:
      - transcendence
    expose:
      - 6379
    stop_signal: SIGINT
    stop_grace_period: 20s
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping"]
      interval: 1s
      timeout: 5s
      retries: 3

  db_sql:
    env_file:
      - .env
    container_name: db_sql
    image: postgres:14
    networks:
      - transcendence
    expose:
      - 5432
    volumes:
      - db_sql:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    shm_size: 128mb
    environment:
      POSTGRES_DB: "${DB_NAME}"
      POSTGRES_USER: "${DB_USER}"
      POSTGRES_PASSWORD: "${DB_PASSWORD}"
      PGUSER: "${DB_USER}"
    stop_grace_period: 20s 
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 2s
      timeout: 30s
      retries: 10

  app:
    depends_on:
      db_redis:
        condition: service_healthy
      db_sql:
        condition: service_healthy
    env_file:
      - .env
    container_name: app
    image: app
    build:
      context: .
      dockerfile: Dockerfile.app
    networks:
      - transcendence
    expose:
      - 8000    
    stop_grace_period: 20s 
    restart: always

  nginx:
    env_file:
      - .env
    depends_on:
      - app
    container_name: nginx
    image: nginx
    build:
      context: .
      args:
        - SSL_CERT_DIR=${SSL_CERT_DIR}
        - SSL_KEY_DIR=${SSL_KEY_DIR}
        - SSL_CERT=${SSL_CERT}
        - SSL_KEY=${SSL_KEY}
        - DOMAIN=${DOMAIN}
      dockerfile: Dockerfile.nginx
    networks:
      - transcendence
    ports:
      - "80:80"
      - "443:443"
    stop_grace_period: 20s
    restart: always
